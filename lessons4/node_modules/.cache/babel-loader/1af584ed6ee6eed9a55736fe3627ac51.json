{"ast":null,"code":"var _jsxFileName = \"/Users/ekaterina/Documents/GitHub/react/lessons4/src/components/CustomInput/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CustomInput = ({\n  tasks,\n  setTasks,\n  currentUser\n}) => {\n  _s();\n\n  const [userInput, setUserInput] = useState(''); //input task\n\n  const inputTask = ({\n    userInput\n  }) => {\n    if (!userInput == '') {\n      saveTask({\n        userInput\n      });\n      setUserInput('');\n    }\n  }; //save new  task\n\n\n  const saveTask = userInput => {\n    if (userInput) {\n      const newTask = {\n        id: Math.random().toString(36).substr(2, 9),\n        task: userInput.userInput,\n        check: false\n      };\n      setTasks([...tasks, newTask]);\n    }\n  };\n\n  useEffect(() => {\n    localStorage.setItem(currentUser, JSON.stringify(tasks));\n  }, [tasks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-block\",\n    children: [/*#__PURE__*/_jsxDEV(Space, {\n      direction: \"vertical\",\n      children: /*#__PURE__*/_jsxDEV(Search, {\n        placeholder: \"name user\",\n        allowClear: true,\n        enterButton: \"\\u0433\\u043E\\u0442\\u043E\\u0432\\u043E\" //size=\"large\"\n        ,\n        onChange: e => setUserInput(e.target.value),\n        onSearch: () => inputTask({\n          userInput\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput,\n      onChange: e => setUserInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => inputTask({\n        userInput\n      }),\n      children: \"ADD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CustomInput, \"soLXh4GTIlMsdkuzugIJlPG1ebs=\");\n\n_c = CustomInput;\nexport default CustomInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomInput\");","map":{"version":3,"sources":["/Users/ekaterina/Documents/GitHub/react/lessons4/src/components/CustomInput/index.jsx"],"names":["React","useEffect","useState","CustomInput","tasks","setTasks","currentUser","userInput","setUserInput","inputTask","saveTask","newTask","id","Math","random","toString","substr","task","check","localStorage","setItem","JSON","stringify","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,QAAR,QAAwB,OAAxB;AACA,OAAO,aAAP;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAD,KAAoC;AAAA;;AACpD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C,CADoD,CAEpD;;AACA,QAAMO,SAAS,GAAG,CAAC;AAACF,IAAAA;AAAD,GAAD,KAAiB;AAC/B,QAAI,CAACA,SAAD,IAAc,EAAlB,EAAsB;AAClBG,MAAAA,QAAQ,CAAC;AAACH,QAAAA;AAAD,OAAD,CAAR;AACAC,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACH;AAEJ,GAND,CAHoD,CAUpD;;;AACA,QAAME,QAAQ,GAAIH,SAAD,IAAe;AAC5B,QAAIA,SAAJ,EAAe;AACX,YAAMI,OAAO,GAAG;AACZC,QAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAoC,CAApC,CADQ;AAEZC,QAAAA,IAAI,EAAEV,SAAS,CAACA,SAFJ;AAGZW,QAAAA,KAAK,EAAE;AAHK,OAAhB;AAKAb,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWO,OAAX,CAAD,CAAR;AACH;AACJ,GATD;;AAUAV,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,YAAY,CAACC,OAAb,CAAqBd,WAArB,EAAkCe,IAAI,CAACC,SAAL,CAAelB,KAAf,CAAlC;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACQ,QAAC,KAAD;AAAO,MAAA,SAAS,EAAC,UAAjB;AAAA,6BACI,QAAC,MAAD;AACI,QAAA,WAAW,EAAC,WADhB;AAEI,QAAA,UAAU,MAFd;AAGI,QAAA,WAAW,EAAC,sCAHhB,CAII;AAJJ;AAKI,QAAA,QAAQ,EAAKmB,CAAD,IAAOf,YAAY,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV,CALnC;AAMI,QAAA,QAAQ,EAAE,MAAMhB,SAAS,CAAC;AAACF,UAAAA;AAAD,SAAD;AAN7B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADR,eAWI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAEA,SAA1B;AAAqC,MAAA,QAAQ,EAAGgB,CAAD,IAAOf,YAAY,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV;AAAlE;AAAA;AAAA;AAAA;AAAA,YAXJ,eAYI;AAAQ,MAAA,OAAO,EAAE,MAAMhB,SAAS,CAAC;AAACF,QAAAA;AAAD,OAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAzCD;;GAAMJ,W;;KAAAA,W;AA0CN,eAAeA,WAAf","sourcesContent":["import React, {useEffect} from \"react\";\nimport {useState}  from \"react\";\nimport './index.css'\n\nconst CustomInput = ({tasks, setTasks, currentUser}) => {\n    const [userInput, setUserInput] = useState('');\n    //input task\n    const inputTask = ({userInput}) => {\n        if (!userInput == '') {\n            saveTask({userInput});\n            setUserInput('')\n        }\n        \n    }\n    //save new  task\n    const saveTask = (userInput) => {\n        if (userInput) {\n            const newTask = {\n                id: Math.random().toString(36).substr(2,9),\n                task: userInput.userInput,\n                check: false\n            }\n            setTasks([...tasks, newTask])\n        }\n    }\n    useEffect(() => {\n        localStorage.setItem(currentUser, JSON.stringify(tasks))\n    }, [tasks])\n\n    return (\n        <div className=\"input-block\">\n                <Space direction=\"vertical\">\n                    <Search\n                        placeholder=\"name user\"\n                        allowClear\n                        enterButton=\"готово\"\n                        //size=\"large\"\n                        onChange = {(e) => setUserInput(e.target.value)}\n                        onSearch={() => inputTask({userInput})}\n                        />\n                    </Space>\n            <input type=\"text\" value={userInput} onChange={(e) => setUserInput(e.target.value)} />\n            <button onClick={() => inputTask({userInput})}>ADD</button>\n        </div>\n    )\n}\nexport default CustomInput;"]},"metadata":{},"sourceType":"module"}